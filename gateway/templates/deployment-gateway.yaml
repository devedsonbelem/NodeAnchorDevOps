apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '5'
  generation: 1
  labels:
    app: gateway
  name: gateway
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.deploymentGateway.replicas | default 2 }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: gateway
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
        - env:
            - name: MY_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: my
          image: '"{{ .Values.deploymentGateway.image }}:{{ .Values.deploymentGateway.imageTag }}"'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 3001
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          name: gateway
          ports:
            - containerPort: 3001
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 3001
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: {{ .Values.deploymentGateway.resourcesLimitsCPU | default "55m" }}
              memory: {{ .Values.deploymentGateway.resourcesLimitsMemory | default "1536Mi" }}
            requests:
              cpu: {{ .Values.deploymentGateway.resourcesRequestsCPU | default "50m" }}
              memory: {{ .Values.deploymentGateway.resourcesRequestsMemory | default "100Mi" }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
